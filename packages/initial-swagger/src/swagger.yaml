swagger: "2.0"
info:
  description: "This is a Squad Management Tool server.  You can find out more about this project at [Github pethersonmoreno/squad-management-tool-example](https://github.com/pethersonmoreno/squad-management-tool-example)."
  version: "1.0.0"
  title: "Swagger Squad Management Tool"
host: "localhost:3001"
basePath: "/"
tags:
- name: "team"
  description: "Everything about your Teams"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "player"
  description: "Everything about players"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /team:
    get:
      tags:
      - "team"
      summary: "Get all teams"
      description: "Returns a list of teams"
      operationId: "getAllTeams"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Team"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
    post:
      tags:
      - "team"
      summary: "Add a new team"
      description: ""
      operationId: "addTeam"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Team object to be created"
        required: true
        schema:
          $ref: "#/definitions/Team"
      responses:
        "200":
          description: "successful operation"
        "405":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
  /team/findHighestLowestAgeByQtdTop:
    get:
      tags:
      - "team"
      summary: "Find Teams with highest and lowest by qtd top"
      operationId: "findTeamsHighestLowestAgeByQtdTop"
      produces:
      - "application/json"
      parameters:
      - name: "qtdTop"
        in: "query"
        description: "Quantity of top to consider in highest and lowest"
        required: true
        type: "integer"
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              highestTeams:
                type: "array"
                items:
                  $ref: "#/definitions/TeamAverageAge"
              lowestTeams:
                type: "array"
                items:
                  $ref: "#/definitions/TeamAverageAge"
        "400":
          description: "Invalid qtdTop value"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
  /team/{teamId}:
    get:
      tags:
      - "team"
      summary: "Find team by ID"
      description: "Returns a single team"
      operationId: "getTeamById"
      produces:
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        description: "ID of team to return"
        required: true
        type: "string"
        format: "uuid"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Team"
        "400":
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        "404":
          description: "Team not found"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
    put:
      tags:
      - "team"
      summary: "Update an existing team"
      description: ""
      operationId: "updateTeam"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        description: "ID of team that needs to be updated"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "body"
        description: "Team object to update"
        required: true
        schema:
          $ref: "#/definitions/Team"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        "404":
          description: "Team not found"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        "405":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
    delete:
      tags:
      - "team"
      summary: "Delete a team"
      description: ""
      operationId: "deleteTeam"
      produces:
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        description: "Team id to delete"
        required: true
        type: "string"
        format: "uuid"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        "404":
          description: "Team not found"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
  /player:
    get:
      tags:
      - "player"
      summary: "Find players optional name filter 'search'"
      description: "Returns a list of players"
      operationId: "findPlayers"
      produces:
      - "application/json"
      parameters:
      - name: "search"
        in: "query"
        description: "used to search players by name"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Team"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
    post:
      tags:
      - "player"
      summary: "Add a new player"
      description: ""
      operationId: "addPlayer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Player object to be created"
        required: true
        schema:
          $ref: "#/definitions/Player"
      responses:
        "200":
          description: "successful operation"
        "405":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
  /player/findMostAndLessPickedOn:
    get:
      tags:
      - "player"
      summary: "Returns most and less picked on players with percentage of picked on"
      operationId: "findPlayersMostAndLessPickedOn"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              mostPickedOn:
                $ref: "#/definitions/PlayerPickedOnPercentage"
        "404":
          description: "No player found in teams"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
definitions:
  Team:
    type: "object"
    required:
    - "name"
    - "type"
    - "teamPlayers"
    properties:
      id:
        type: "string"
        format: "uuid"
      name:
        type: "string"
      description:
        type: "string"
      website:
        type: "string"
        format: "uri"
      type:
        type: "string"
        description: "team type"
        enum:
        - "Fantasy"
        - "Real"
      tags:
        type: "array"
        items:
          type: "string"
      teamPlayers:
        type: "array"
        items:
          type: "object"
          properties:
            fieldPosition:
              type: "string"
              description: "field position of player in this team"
              enum:
              - "goal-keeper"
              - "left-back"
              - "sweeper" #center-back
              - "right-back"
              - "left-central-midfielder"
              - "defensive-midfielder" # center-central-midfielder
              - "right-central-midfielder"
              - "left-midfielder"
              - "attacking-midfielder" #center-midfielder
              - "right-midfielder"
              - "left-wing"
              - "striker"
              - "right-wing"
            player:
              $ref: "#/definitions/Player"
    xml:
      name: "Team"
  TeamAverageAge:
    type: "object"
    properties:
      average:
        type: "number"
        format: "double"
      team:
        type: "object"
        properties:
          id:
            type: "string"
            format: "uuid"
          name:
            type: "string"
  Player:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "string"
        format: "uuid"
      name:
        type: "string"
        example: "doggie"
      age:
        type: "integer"
        format: "int32"
        example: 20
    xml:
      name: "Player"
  PlayerPickedOnPercentage:
    type: "object"
    properties:
      percentage:
        type: "number"
        format: "double"
      player:
        type: "object"
        properties:
          id:
            type: "string"
            format: "uuid"
          name:
            type: "string"
  ApiErrorResponse:
    type: "object"
    properties:
      code:
        type: "string"
      message:
        type: "string"